The ``add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``add_integer`` module:

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

	>>> matrix_divided([[5, 10, 15], [20, 25, 30]], 5)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3.5)
	[[0.29, 0.57, 0.86], [1.14, 1.43, 1.71]]

	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], -3)
	[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

	>>> matrix_divided([[1.1, -2, -3.3], [4.4, 5.0, -6]], 3)
	[[0.37, -0.67, -1.1], [1.47, 1.67, -2.0]]

	>>> matrix_divided([[1.1, -2, -3.3], [4.4, 5.0, -6]], -3)
	[[-0.37, 0.67, 1.1], [-1.47, -1.67, 2.0]]

	>>> matrix_divided([[1.1, -2, -3.3], [4.4, 5.0, -6]], 3.5)
	[[0.31, -0.57, -0.94], [1.26, 1.43, -1.71]]

	>>> matrix_divided([[1, 2, 3, 4], [5, 6, 7, 8]], 3)
	[[0.33, 0.67, 1.0, 1.33], [1.67, 2.0, 2.33, 2.67]]

	>>> matrix_divided([[], []], 2)
	[[], []]

	>>> matrix_divided([[]], 3)
	Traceback (most recent call last):
	...
	IndexError: list index out of range

	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

	>>> matrix_divided("non", 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1, 2, "non"], [4, 5, 6]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1, 2, (4, 3)], [4, 5, 6]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1, 2, 3], [4, 5]], 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

	matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], float('-inf'))
	[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]

	>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], "t")
	Traceback (most recent call last):
	...
	TypeError: div must be a number

	>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], None)
	Traceback (most recent call last):
	...
	TypeError: div must be a number

	>>> matrix_divided(None, None)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

	>>> module_documentation = __import__("2-matrix_divided").__doc__
	>>> print(len(module_documentation) > 0)
	True

	>>> function_documentation = __import__("2-matrix_divided").__doc__
	>>> print(len(function_documentation) > 0)
	True
